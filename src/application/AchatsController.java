package application;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.TextField;
import models.Restauration;
import models.SpaBeauty;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;

import java.net.URL;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.scene.control.Alert;
import javafx.scene.control.ComboBox;

import javafx.scene.control.TextArea;

import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;

public class AchatsController implements Initializable {

    @FXML
    private TableView tableview;
    @FXML
    private ComboBox type;
	@FXML
	private ComboBox txtdeal;
	@FXML
	private TextField deal;
	@FXML
	private TextField fournisseur;
	@FXML
	private TextField prixdeal;
	@FXML
	private TextArea adresse;
	@FXML
	private TextField tel;
	@FXML
	private TableColumn<?,String> coldeal;
	@FXML
	private TableColumn <?,String>colfr;
	@FXML
	private TableColumn<?,Float> colprix;
	@FXML
	private TableColumn<?,String> coldatefin;
	@FXML
	private TableColumn <?,String>coldescr;
	
	private int num=1000;

	public Connection getConnection() {
		Connection  conn;
		try {
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gestion_deals","root","");
			return conn;
		} catch(Exception ex) {
			System.out.print("Error: "+ex.getMessage());
			return null; 
		}
	}
	// Event Listener on Button.onAction
	@FXML
	public void chercher(ActionEvent event) {
		// TODO Autogenerated
		Connection conn = getConnection();
		ObservableList<SpaBeauty> data = FXCollections.observableArrayList();
		ObservableList<Restauration> restau = FXCollections.observableArrayList();
		if ( !type.getSelectionModel().getSelectedItem().toString().equals("")) {
		if ( !txtdeal.getSelectionModel().getSelectedItem().toString().equals("")) {
			if (type.getSelectionModel().getSelectedItem().toString().equals("Beauty&Spa")) {
			String ndeal=txtdeal.getSelectionModel().getSelectedItem().toString() ;
			
	    	   try { 
	           ResultSet rs = conn.createStatement().executeQuery("SELECT * FROM spabeauty where fournisseur like '"+ndeal+"'");
	           while (rs.next()) {
	        	   data.add(new SpaBeauty(rs.getString("nom"),rs.getString("fournisseur"),rs.getFloat("prix_deal"),rs.getString("date_fin"),rs.getString("description")));
	           }
		} catch (SQLException ex) {
            System.out.println("Erreur d'ajout !");
            Logger.getLogger(AchatsController.class.getName()).log(Level.SEVERE, null, ex);

        }
				coldeal.setCellValueFactory(new PropertyValueFactory<>("nom"));
				colfr.setCellValueFactory(new PropertyValueFactory<>("fournisseur"));
				colprix.setCellValueFactory(new PropertyValueFactory<>("prix_deal"));
				coldatefin.setCellValueFactory(new PropertyValueFactory<>("date_fin"));
				coldescr.setCellValueFactory(new PropertyValueFactory<>("description"));
				

	        	tableview.setItems(data); 
 
		}
			else if  (type.getSelectionModel().getSelectedItem().toString().equals("Restauration")) {
				String rdeal=txtdeal.getSelectionModel().getSelectedItem().toString() ;
				
		    	   try { 
		           ResultSet rsr = conn.createStatement().executeQuery("SELECT * FROM restauration where fournisseur like '"+rdeal+"'");
		           while (rsr.next()) {
		        	   restau.add(new Restauration(rsr.getString("nom"),rsr.getString("fournisseur"),rsr.getFloat("prix_deal"),rsr.getString("date_fin"),rsr.getString("description")));
		           }
			} catch (SQLException ex) {
	            System.out.println("Erreur d'ajout !");
	            Logger.getLogger(AchatsController.class.getName()).log(Level.SEVERE, null, ex);

	        }
					coldeal.setCellValueFactory(new PropertyValueFactory<>("nom"));
					colfr.setCellValueFactory(new PropertyValueFactory<>("fournisseur"));
					colprix.setCellValueFactory(new PropertyValueFactory<>("prix_deal"));
					coldatefin.setCellValueFactory(new PropertyValueFactory<>("date_fin"));
					coldescr.setCellValueFactory(new PropertyValueFactory<>("description"));
					

		        	tableview.setItems(restau); 
	 
			}
		}
		 else {
			 	Alert alert = new Alert(AlertType.WARNING,"Veuillez choisir un fournisseur !",javafx.scene.control.ButtonType.OK);
			 	alert.showAndWait(); 
	       } 
		}
		
		 else {
			 	Alert alert = new Alert(AlertType.WARNING,"Veuillez choisir un type !",javafx.scene.control.ButtonType.OK);
			 	alert.showAndWait(); 
	       } 
		 
	}
	private void setcellvalue(){
        tableview.setOnMouseClicked(e-> {  
            SpaBeauty sb = (SpaBeauty)tableview.getItems().get(tableview.getSelectionModel().getSelectedIndex());
            deal.setText(sb.getNom());
            fournisseur.setText(sb.getFournisseur());
            prixdeal.setText(Float.toString(sb.getPrix_deal()));
            Connection conn = getConnection();
            String fr=sb.getFournisseur();
	    	   
            try { 
	    		   ResultSet rs = conn.createStatement().executeQuery("SELECT adresse,tel FROM  fournisseurs where nom_commercial like '"+fr+"'");
	    		   while (rs.next()) {
	    			   adresse.setText(rs.getString("adresse"));
	    			   tel.setText(rs.getString("tel"));  
	    		   }
            } catch (SQLException ex) {
            	System.out.println("Erreur !");
            	Logger.getLogger(AchatsController.class.getName()).log(Level.SEVERE, null, ex);    	
            }
   
        });	

	}
	// Event Listener on Button.onAction
	@FXML
	public void reserver(ActionEvent event)  {
		// TODO Autogenerated
		Connection conn = getConnection();
		int cin = 0;
		SpaBeauty selectedrow = (SpaBeauty)tableview.getSelectionModel().getSelectedItem();
	    if (selectedrow == null) {
	    	Alert alert = new Alert(Alert.AlertType.ERROR);
	        alert.setContentText("Aucun deal sélectionné !");
	        alert.showAndWait();
	    }
	    else {
	    	   Date date = new Date( System.currentTimeMillis() );
	    	    SimpleDateFormat sdf = new SimpleDateFormat( "dd/MM/yyyy" );
	    	  //  System.out.println( sdf.format( date ) );
	    	    try { 
	            ResultSet rs = conn.createStatement().executeQuery("SELECT CIN from currentuser");
	            while (rs.next()) {
	            	 cin=rs.getInt("CIN");
	            }
	    	    }catch (SQLException ex) {
	    	    	System.out.println("Cin introuvable");
	                Logger.getLogger(AchatsController.class.getName()).log(Level.SEVERE, null, ex);
	    	    }
	    	    
	            String requete="INSERT INTO vente VALUES ('" +Math.random()+"','"+cin+"','"+fournisseur.getText()+"','"+sdf.format( date )+"','"+deal.getText()+"','"+prixdeal.getText()+"');";   
	            
	            try 
	            {	
	            	PreparedStatement pst = conn.prepareStatement(requete);
	                pst.executeUpdate(requete);
	                System.out.println("Achat ajouté avec succès !");
	                Alert alert = new Alert(AlertType.CONFIRMATION,"Achat ajouté avec succès",javafx.scene.control.ButtonType.OK);
	          		alert.showAndWait();
	                 
	            } catch (SQLException ex) {
	                System.out.println("Erreur d'ajout !");
	                Logger.getLogger(AchatsController.class.getName()).log(Level.SEVERE, null, ex);

	            }
	    	    
	    }
	} 
	 @FXML
	    void Onclicktype(ActionEvent event) {
		 Connection conn = getConnection();
		 ObservableList <String> liste_deals = FXCollections.observableArrayList ();
		    if (type.getSelectionModel().getSelectedItem().toString().equals("Beauty&Spa")){
		 
		    	 try {
		    		 //ResultSet rsn = conn.createStatement().executeQuery("SELECT nom_commercial FROM fournisseurs");
		         	
		             ResultSet rs = conn.createStatement().executeQuery("SELECT DISTINCT(fournisseur) FROM spabeauty");
		             while(rs.next())
		             { 
		            	 liste_deals.add(rs.getString("fournisseur"));
		             }
		            
		         } catch (SQLException ex) {
		             Logger.getLogger(AchatsController.class.getName()).log(Level.SEVERE, null, ex);
		         }
		    	 txtdeal.setItems( liste_deals);
		    	 txtdeal.setVisibleRowCount(3);
		     }
		    else if (type.getSelectionModel().getSelectedItem().toString().equals("Restauration")) {
		    	try {
		         	
		             ResultSet rsr = conn.createStatement().executeQuery("SELECT DISTINCT(fournisseur) FROM restauration");
		             while(rsr.next())
		             { 
		            	 liste_deals.add(rsr.getString("fournisseur"));
		             }
		            
		         } catch (SQLException ex) {
		             Logger.getLogger(AchatsController.class.getName()).log(Level.SEVERE, null, ex);
		         }
		    	 txtdeal.setItems( liste_deals);
		    	 txtdeal.setVisibleRowCount(3);
		    }
	    }
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub 
		setcellvalue();
		Connection conn = getConnection();
		 ObservableList<String> list = FXCollections.observableArrayList("Beauty&Spa","Restauration","Hotellerie");
	     type.setItems(list);
	 	
	/*   */
	    	
	}
}
