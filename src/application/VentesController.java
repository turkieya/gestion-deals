package application;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Label;
import javafx.scene.control.cell.PropertyValueFactory;
import models.Vente;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfWriter;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.TextArea;

import javafx.scene.control.TableView;
import javafx.scene.control.Alert;
import javafx.scene.control.TableColumn;

public class VentesController implements Initializable  {
	@FXML
	private TextField txtdate;
	@FXML
	private TableView <Vente> tabventes;
	@FXML
	private TableColumn<Vente,Integer> colnum;
	@FXML
	private TableColumn<Vente,String> coldate;
	@FXML
	private TableColumn<Vente,String> coldeal;
	@FXML
	private TableColumn <Vente,Float>colprix;
	@FXML
	private TableColumn <Vente,String>colfr;
	@FXML
	private TableColumn<Vente,Integer> colcin;
	@FXML
	private Label num;
	@FXML
	private Label date;
	@FXML
	private Label client;
	@FXML
	private Label tel;
	@FXML
	private TextArea deal;
	@FXML
	private Label prix;
	@FXML
	private Label fournisseur;
	@FXML
	private TextArea adresse;
	@FXML
	private TextField txtcin;
	
	public Connection getConnection() {
		Connection  conn;
		try {
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/gestion_deals","root","");
			return conn;
		} catch(Exception ex) {
			System.out.print("Error: "+ex.getMessage());
			return null; 
		}
	}

	// Event Listener on TextField[#txtdate].onAction
	@FXML
	public void chercherdate(ActionEvent event) {
		// TODO Autogenerated
		ObservableList<Vente> data = FXCollections.observableArrayList();
		ObservableList<Vente> filter_data = FXCollections.observableArrayList();
	
		if ( !txtdate.getText().equals("")) {
			Connection conn = getConnection();
 
	    	try {
	           ResultSet rs = conn.createStatement().executeQuery("SELECT * FROM vente ");
	           while (rs.next()) {
	        	   data.add(new Vente(rs.getInt("num"),rs.getInt("cin_clt"),rs.getString("fournisseur"),rs.getString("date"),rs.getString("deal"),rs.getFloat("prixdeal")));
	        		
	           }
	           data.stream().filter(e->e.getDate().equals(txtdate.getText())).forEach(e->filter_data.add(e));

		} catch (SQLException ex) {
            Logger.getLogger(VentesController.class.getName()).log(Level.SEVERE, null, ex);

        } 
	    	
				colnum.setCellValueFactory(new PropertyValueFactory<>("num"));
	    		coldeal.setCellValueFactory(new PropertyValueFactory<>("deal"));
				colfr.setCellValueFactory(new PropertyValueFactory<>("fournisseur"));
				colprix.setCellValueFactory(new PropertyValueFactory<>("prixdeal"));
				coldate.setCellValueFactory(new PropertyValueFactory<>("date"));
				colcin.setCellValueFactory(new PropertyValueFactory<>("cin_clt"));
				
				tabventes.setItems(filter_data);
				
		}
		txtdate.clear();

	}
	// Event Listener on TextField[#txtcin].onAction
	@FXML
	public void cherchercin(ActionEvent event) {
		// TODO Autogenerated
		ObservableList<Vente> data = FXCollections.observableArrayList();
		ObservableList<Vente> filter_data = FXCollections.observableArrayList();
	
		if ( !txtcin.getText().equals("")) {
			Connection conn = getConnection();
 
	    	try {
	           ResultSet rs = conn.createStatement().executeQuery("SELECT * FROM vente ");
	           while (rs.next()) {
	        	   data.add(new Vente(rs.getInt("num"),rs.getInt("cin_clt"),rs.getString("fournisseur"),rs.getString("date"),rs.getString("deal"),rs.getFloat("prixdeal")));
	        		
	           }
	           data.stream().filter(e->String.valueOf(e.getCin_clt()).equals(txtcin.getText())).forEach(e->filter_data.add(e));

		} catch (SQLException ex) {
            Logger.getLogger(VentesController.class.getName()).log(Level.SEVERE, null, ex);

        }  
	    	
	    	//Stream.of(tab).sorted().forEach(e-> System.out.print(e+" "));
				colnum.setCellValueFactory(new PropertyValueFactory<>("num"));
	    		coldeal.setCellValueFactory(new PropertyValueFactory<>("deal"));
				colfr.setCellValueFactory(new PropertyValueFactory<>("fournisseur"));
				colprix.setCellValueFactory(new PropertyValueFactory<>("prixdeal"));
				coldate.setCellValueFactory(new PropertyValueFactory<>("date"));
				colcin.setCellValueFactory(new PropertyValueFactory<>("cin_clt"));
				
				tabventes.setItems(filter_data);
				
		}
		txtcin.clear();
	
	}
	private void setcellvalue(){
		tabventes.setOnMouseClicked(e-> { 
            Vente v = tabventes.getItems().get(tabventes.getSelectionModel().getSelectedIndex());
            
            deal.setText(v.getDeal());
            fournisseur.setText(v.getFournisseur());
            prix.setText(Float.toString(v.getPrixdeal()));
            date.setText(v.getDate());
            num.setText(Integer.toString(v.getNum()));
            Connection conn = getConnection();
            String nom = null;
            String prenom = null;
            int telc=0;
            String adr=null;
            String f =v.getFournisseur();
            try { 
        		  
            	ResultSet rscl= conn.createStatement().executeQuery("SELECT nom,prenom,tel FROM clients where CIN =' "+v.getCin_clt()+"'");
		         while (rscl.next()) {
		        	    nom=rscl.getString("nom");
		        	    prenom=rscl.getString("prenom"); 
		        	    telc=rscl.getInt("tel");
		        	   } 
			} catch (SQLException ex) {
	            System.out.println("Cin introuvable");
	            Logger.getLogger(VentesController.class.getName()).log(Level.SEVERE, null, ex); 
	          }
            try { 
      		  System.out.print(f);
            	ResultSet rsf= conn.createStatement().executeQuery("SELECT adresse FROM fournisseurs where nom_commercial like '"+f+"'");
		         while (rsf.next()) {
		        	    adr=rsf.getString("adresse");
		        	  
		        	   }  
			} catch (SQLException ex) {
	            System.out.println("Cin introuvable");
	            Logger.getLogger(VentesController.class.getName()).log(Level.SEVERE, null, ex);
	          }
            client.setText(nom+" "+prenom);
            tel.setText(Integer.toString(telc));
            adresse.setText(adr);
         
        });
   }
	// Event Listener on Button.onAction
	@FXML
	public void imprimer(ActionEvent event) {
		// TODO Autogenerated
		int cin=0;
		String nom = null;
		String prenom = null;
		int numFact = tabventes.getSelectionModel().getSelectedItem().getNum();
		Connection conn = getConnection();
		
		try {
		    ResultSet rsc = conn.createStatement().executeQuery("SELECT CIN,nom,prenom FROM currentuser ");
		    while (rsc.next()) {
		        cin=rsc.getInt("CIN");
		        nom=rsc.getString("nom");
		        prenom=rsc.getString("prenom");
		    }
		} catch (SQLException ex) {
	            System.out.println("Données introuvables");
	            Logger.getLogger(CommandesController.class.getName()).log(Level.SEVERE, null, ex);
	     	}
		 String date=tabventes.getSelectionModel().getSelectedItem().getDate();
		 String deal=tabventes.getSelectionModel().getSelectedItem().getDeal();
		 String four=tabventes.getSelectionModel().getSelectedItem().getFournisseur();
		 Float prix=tabventes.getSelectionModel().getSelectedItem().getPrixdeal();

	     Document document = new Document();
	        try{
	            PdfWriter.getInstance(document, new FileOutputStream("Facture N."+numFact+".pdf"));
	            document.open();

	            Font f=new Font(FontFactory.getFont(FontFactory.TIMES_BOLD,24,Font.UNDERLINE));
	            f.setColor(241,0,119);
	            
	            Font f2=new Font(FontFactory.getFont(FontFactory.TIMES_BOLD,18,Font.BOLD));
	            f2.setColor(194,0,76);
	            
	            Paragraph p1 = new Paragraph("Bon Commande N° :  "+ numFact ,f);
	            p1.setAlignment(Paragraph.ALIGN_CENTER);
	            Paragraph p0 = new Paragraph("     ");
	                 
	            Paragraph p2 = new Paragraph("____________________________________________________________________________");
	            Paragraph p3 = new Paragraph("      Cin du Client :  "+"  "+cin+"      Nom du Client :  "+"  "+nom+" "+prenom);
	            Paragraph p4 = new Paragraph("      Deal Acheté :   " +"  "+deal+"      Fournisseur :   " +"  "+four);
	            Paragraph p5 = new Paragraph("      Montant :   " +"  "+prix);
	            Paragraph p6 = new Paragraph("      Date Achat :  "+"  "+date);
	            Paragraph p9 = new Paragraph("Bienvenue au Best Deal ",f2);
	            p9.setAlignment(Paragraph.ALIGN_RIGHT);
	            
		    
	            document.add(p0); 
	            document.add(p1);
	            document.add(p0);
	            document.add(p2);
	            document.add(p0);
	            document.add(p0);
	            document.add(p6);
	            document.add(p0);
	            
	            document.add(p3);
	            document.add(p0);
	            
	            document.add(p4);
	            document.add(p0);
	            
	            document.add(p5);
	            document.add(p0);
	            
	            document.add(p2);
	            document.add(p0);
	            document.add(p0);
	            document.add(p9);
	            
	               
	        }
	        catch(DocumentException | FileNotFoundException e){
	            System.out.println(e);
	        }
	        Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setContentText("Facture ( "+ numFact + " ) du PATIENT  ( " + nom+" "+prenom + " )   généré avec succès !");
            alert.showAndWait();
	        document.close();
	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		setcellvalue();
	}
}
